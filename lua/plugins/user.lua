-- You can also add or configure plugins by creating files in this `plugins/` folder
-- Here are some examples:

---@type LazySpec
return {

  -- == Examples of Adding Plugins ==

  "andweeb/presence.nvim",
  {
    "ray-x/lsp_signature.nvim",
    event = "BufRead",
    config = function() require("lsp_signature").setup() end,
  },

  -- == Examples of Overriding Plugins ==

  -- customize alpha options
  {
    "goolord/alpha-nvim", -- this 
    opts = function(_, opts)
      -- customize the dashboard header
      opts.section.header.val = {
        " ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà",
        "‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        " ",
        "    ‚ñà‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ñà",
        "    ‚ñà‚ñà‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà",
        "    ‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ ‚ÄÅ‚ÄÅ‚ÄÅ ‚ñà‚ñà",
      }
      return opts
    end,
  },
  -- You can disable default plugins as follows:
  { "max397574/better-escape.nvim", enabled = false },

  -- You can also easily customize additional setup of plugins that is outside of the plugin's setup call
  {
    "L3MON4D3/LuaSnip",
    config = function(plugin, opts)
      require "astronvim.plugins.configs.luasnip"(plugin, opts) -- include the default astronvim config that calls the setup call
      -- add more custom luasnip configuration such as filetype extend or custom snippets
      local luasnip = require "luasnip"
      luasnip.filetype_extend("javascript", { "javascriptreact" })
    end,
  },

  {
    "windwp/nvim-autopairs",
    config = function(plugin, opts)
      require "astronvim.plugins.configs.nvim-autopairs"(plugin, opts) -- include the default astronvim config that calls the setup call
      -- add more custom autopairs configuration such as custom rules
      local npairs = require "nvim-autopairs"
      local Rule = require "nvim-autopairs.rule"
      local cond = require "nvim-autopairs.conds"
      npairs.add_rules(
        {
          Rule("$", "$", { "tex", "latex" })
            -- don't add a pair if the next character is %
            :with_pair(cond.not_after_regex "%%")
            -- don't add a pair if  the previous character is xxx
            :with_pair(
              cond.not_before_regex("xxx", 3)
            )
            -- don't move right when repeat character
            :with_move(cond.none())
            -- don't delete if the next character is xx
            :with_del(cond.not_after_regex "xx")
            -- disable adding a newline when you press <cr>
            :with_cr(cond.none()),
        },
        -- disable for .vim files, but it work for another filetypes
        Rule("a", "a", "-vim")
      )
    end,
  },
  {
    "github/copilot.vim",
    enabled = true,
    cmd = "Copilot",
    event = "BufRead",
    config = function()
      vim.b.copilot_enabled = true
      vim.g.copilot_no_tab_map = true

      local keymap = vim.keymap.set
      -- https://github.com/orgs/community/discussions/29817#discussioncomment-4217615
      keymap(
        "i",
        "<C-a>",
        'copilot#Accept("<CR>")',
        { silent = true, expr = true, script = true, replace_keycodes = false }
      )
      keymap("i", "<M-]>", "<Plug>(copilot-next)")
      keymap("i", "<M-[>", "<Plug>(copilot-previous)")
      keymap("i", "<M-d>", "<Plug>(copilot-dismiss)")
      keymap("i", "<M-/>", "<Plug>(copilot-suggest)")
      
      -- Disable Copilot for large files
      vim.cmd([[
        autocmd BufReadPre * 
        lua if vim.fn.getfsize(vim.fn.expand("<afile>")) > 100000 or vim.fn.getfsize(vim.fn.expand("<afile>")) == -2 then vim.b.copilot_enabled = false end
      ]])
    end,
  },
  {
    "neoclide/coc.nvim",
    branch = "release",
    event = "VeryLazy",
    config = function()
      local coc_config = {
        -- Âü∫Êú¨Ë®≠ÂÆö
        suggest = {
          noselect = false,
          enablePreselect = false,
          triggerAfterInsertEnter = true,
          timeout = 5000,
          enablePreview = true,
          floatEnable = true,
          detailField = "preview",
          snippetIndicator = "üß©",
        },
        -- Ë®∫Êñ≠Ë®≠ÂÆö
        diagnostic = {
          displayByAle = false,
          errorSign = "‚ùå",
          warningSign = "‚ö†Ô∏è",
          infoSign = "‚ÑπÔ∏è",
          hintSign = "üí°",
          virtualText = true,
          virtualTextPrefix = "‚ùØ‚ùØ",
        },
        -- „Ç≥„Éº„Éâ„Ç¢„ÇØ„Ç∑„Éß„É≥Ë®≠ÂÆö
        codeAction = {
          showDocumentation = {
            enable = true,
          },
        },
        -- Ë£úÂÆåË®≠ÂÆö
        completion = {
          triggerAfterInsertEnter = true,
          minTriggerInputLength = 2,
          maxItemCount = 50,
        },
        -- „Ç∑„Ç∞„Éç„ÉÅ„É£„Éò„É´„ÉóË®≠ÂÆö
        signature = {
          enable = true,
          target = "float",
        },
        -- Ë®ÄË™û„Çµ„Éº„Éê„ÉºË®≠ÂÆö
        languageserver = {
          -- ‰æã: TypeScript
          typescript = {
            enable = true,
            filetypes = {"typescript", "typescriptreact", "typescript.tsx"},
          },
          -- ÂøÖË¶Å„Å´Âøú„Åò„Å¶‰ªñ„ÅÆË®ÄË™û„Çµ„Éº„Éê„Éº„ÇíËøΩÂä†
        },
        -- BiomeË®≠ÂÆö
        biome = {
          enabled = true,
          lspBin = "biome",
          requireConfiguration = false,
          enableFormat = true,
          enableLint = true,
        },
        -- „ÇΩ„Éº„ÇπË®≠ÂÆö
        sources = {
          {name = "coc-snippets"},
          {name = "buffer"},
          {name = "file"},
          {name = "path"},
        },
        -- „Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥Ë®≠ÂÆö
        status = {
          enable = true,
          separator = " ",
        },
        -- Êã°ÂºµÊ©üËÉΩË®≠ÂÆö
        extensions = {
          "coc-json",
          "coc-tsserver",
          "coc-eslint",
          "coc-prettier",
          "coc-biome",
          -- ÂøÖË¶Å„Å´Âøú„Åò„Å¶‰ªñ„ÅÆÊã°ÂºµÊ©üËÉΩ„ÇíËøΩÂä†
        },
        -- „Éï„Ç©„Éº„Éû„ÉÉ„ÉàË®≠ÂÆö
        format = {
          javascriptSortImports = true,
          typescriptSortImports = true,
        },
        -- Ë£úÂÆå„Ç¢„Ç§„Ç≥„É≥Ë®≠ÂÆö
        list = {
          indicator = ">",
          nextKeymap = "<C-j>",
          previousKeymap = "<C-k>",
        },
      }

      -- coc.nvim„ÅÆË®≠ÂÆö„ÇíÈÅ©Áî®
      vim.g.coc_user_config = coc_config

    end,
  },
  {
    "nvim-neo-tree/neo-tree.nvim"
  }
}

